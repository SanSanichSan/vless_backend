import requests
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from yookassa import Configuration, Payment

import config
import database

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞ üí≥", callback_data='pricing')],
        [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", callback_data='profile')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å ‚ùì", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    database.add_user_if_not_exists(user.id, user.username)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ Freedom Net.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.",
        reply_markup=get_main_menu()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if query.data == 'main_menu':
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )

    # --- –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ ---
    elif query.data == 'pricing':
        keyboard = []
        for plan_id, plan_details in config.PLANS.items():
            text = f"{plan_details[0]} - {plan_details[1]} ‚ÇΩ"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"buy_{plan_id}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # --- –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è ---
    elif query.data == 'profile':
        profile_data = database.get_user_profile(user.id)
        api_headers = {'Authorization': f'Bearer {config.VPN_API_KEY}'}
        try:
            response = requests.get(f"{config.VPN_API_URL}/users/{user.id}", headers=api_headers)
            vpn_key = response.json()['data']['vpn_key'] if response.ok else "–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception:
            vpn_key = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"

        if profile_data and profile_data['days_left'] > 0:
            text = (f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                    f"**–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {profile_data['subscription_until']}\n"
                    f"**–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {profile_data['days_left']}\n\n"
                    f"üîë **–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:**\n`{vpn_key}`")
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."

        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]), parse_mode='Markdown')

    # --- –ü–æ–º–æ—â—å ---
    elif query.data == 'help':
        text = "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @your_support_account"
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]))

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa ---
    elif query.data.startswith('buy_'):
        plan_id = query.data.split('_')[1]
        plan_name, plan_price, plan_days = config.PLANS[plan_id]

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –ÆKassa
        Configuration.account_id = config.YOOKASSA_SHOP_ID
        Configuration.secret_key = config.YOOKASSA_SECRET_KEY

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        idempotence_key = str(uuid.uuid4())
        payment = Payment.create({
            "amount": {
                "value": str(plan_price),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{context.bot.username}" # –ö—É–¥–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            },
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Freedom Net: {plan_name}",
            "metadata": {
                'user_id': user.id,
                'username': user.username,
                'plan_id': plan_id
            }
        }, idempotence_key)

        payment_url = payment.confirmation.confirmation_url

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: **{plan_name}**\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{plan_price} ‚ÇΩ**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data='pricing')]
            ]),
            parse_mode='Markdown'
        )

def main():
    application = Application.builder().token(config.BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()

